# Generated by Django 5.1.1 on 2025-01-06 19:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_name', models.CharField(max_length=128, verbose_name='Название экзамена')),
            ],
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff_name', models.CharField(max_length=128, verbose_name='Название тарифа')),
                ('price', models.FloatField(verbose_name='Цена тарифа')),
                ('tariff_info', models.TextField(verbose_name='Информация о тарифе')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('role', models.CharField(choices=[('ученик', 'Ученик'), ('учитель', 'Учитель')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='account_groups', related_query_name='account', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='account_user_permissions', related_query_name='account', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studying_year', models.IntegerField(verbose_name='Год обучения')),
                ('account', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
                ('exams', models.ManyToManyField(related_name='student_exams', to='main.exam')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Конец Тарифа')),
                ('education', models.TextField(verbose_name='Образование')),
                ('account', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
                ('exams', models.ManyToManyField(related_name='teacher_exams', to='main.exam')),
                ('fk_tariff_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='teacher_tariff', to='main.tariff')),
                ('students', models.ManyToManyField(related_name='teacher_students', to='main.student')),
            ],
        ),
        migrations.CreateModel(
            name='TypeOfTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='Баллы')),
                ('fk_exam_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.exam')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.BooleanField(verbose_name='Доступность')),
                ('description', models.TextField(verbose_name='Описание задания')),
                ('image_path', models.CharField(max_length=128, verbose_name='Путь до изображения')),
                ('correct_answer', models.CharField(max_length=128, verbose_name='Правильный ответ')),
                ('file_path', models.CharField(default='113311', max_length=128, verbose_name='Путь до файла')),
                ('fk_exam_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exam_task', to='main.exam')),
                ('creator_id', models.ForeignKey(default='112211', on_delete=django.db.models.deletion.PROTECT, related_name='task_creator', to='main.teacher')),
                ('fk_code_of_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='code_of_number', to='main.typeoftask')),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.BooleanField(verbose_name='Доступность')),
                ('time_limit', models.TimeField(verbose_name='Временное ограничение')),
                ('status', models.CharField(choices=[('задано', 'Задано'), ('на проверке', 'На проверке'), ('проверено', 'Проверено')], default='задано', max_length=20)),
                ('creator_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='variant_creator', to='main.teacher')),
                ('fk_exam_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exam_v', to='main.exam')),
                ('tasks', models.ManyToManyField(related_name='TeacherToStudent', to='main.task')),
            ],
        ),
        migrations.CreateModel(
            name='TeachersVariantStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dead_line', models.DateTimeField(verbose_name='Дедлайн')),
                ('fk_student_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_t_v', to='main.student')),
                ('fk_teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='teacher_v_s', to='main.teacher')),
                ('fk_variant_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='variant_t_s', to='main.variant')),
            ],
        ),
    ]
